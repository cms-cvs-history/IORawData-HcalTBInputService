//
// File generated by rootcint at Tue Aug 23 12:04:13 2005.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "CDFChunk_dict.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TStreamerInfo.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"

#include "TCollectionProxy.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void CDFChunk_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *CDFChunk_IsA(const void*);
   static void *new_CDFChunk(void *p = 0);
   static void *newArray_CDFChunk(Long_t size);
   static void delete_CDFChunk(void *p);
   static void deleteArray_CDFChunk(void *p);
   static void destruct_CDFChunk(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::CDFChunk*)
   {
      ::CDFChunk *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("CDFChunk", ::CDFChunk::Class_Version(), "CDFChunk.h", 6,
                  typeid(::CDFChunk), DefineBehavior(ptr, ptr),
                  &::CDFChunk::Dictionary, &CDFChunk_IsA, 0,
                  sizeof(::CDFChunk) );
      instance.SetNew(&new_CDFChunk);
      instance.SetNewArray(&newArray_CDFChunk);
      instance.SetDelete(&delete_CDFChunk);
      instance.SetDeleteArray(&deleteArray_CDFChunk);
      instance.SetDestructor(&destruct_CDFChunk);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::CDFChunk*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

namespace ROOT {
   void CDFEventInfo_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static TClass *CDFEventInfo_IsA(const void*);
   static void *new_CDFEventInfo(void *p = 0);
   static void *newArray_CDFEventInfo(Long_t size);
   static void delete_CDFEventInfo(void *p);
   static void deleteArray_CDFEventInfo(void *p);
   static void destruct_CDFEventInfo(void *p);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const ::CDFEventInfo*)
   {
      ::CDFEventInfo *ptr = 0;
      static ::ROOT::TGenericClassInfo 
         instance("CDFEventInfo", ::CDFEventInfo::Class_Version(), "CDFEventInfo.h", 8,
                  typeid(::CDFEventInfo), DefineBehavior(ptr, ptr),
                  &::CDFEventInfo::Dictionary, &CDFEventInfo_IsA, 0,
                  sizeof(::CDFEventInfo) );
      instance.SetNew(&new_CDFEventInfo);
      instance.SetNewArray(&newArray_CDFEventInfo);
      instance.SetDelete(&delete_CDFEventInfo);
      instance.SetDeleteArray(&deleteArray_CDFEventInfo);
      instance.SetDestructor(&destruct_CDFEventInfo);
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance((const ::CDFEventInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
}

//______________________________________________________________________________
TClass *CDFChunk::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CDFChunk::Class_Name()
{
   return "CDFChunk";
}

//______________________________________________________________________________
const char *CDFChunk::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::CDFChunk*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CDFChunk::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::CDFChunk*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CDFChunk::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::CDFChunk*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CDFChunk::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::CDFChunk*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *CDFEventInfo::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CDFEventInfo::Class_Name()
{
   return "CDFEventInfo";
}

//______________________________________________________________________________
const char *CDFEventInfo::ImplFileName()
{
   return ::ROOT::GenerateInitInstance((const ::CDFEventInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CDFEventInfo::ImplFileLine()
{
   return ::ROOT::GenerateInitInstance((const ::CDFEventInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CDFEventInfo::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstance((const ::CDFEventInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CDFEventInfo::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstance((const ::CDFEventInfo*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void CDFChunk::Streamer(TBuffer &R__b)
{
   // Stream an object of class CDFChunk.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fChunkName.Streamer(R__b);
      R__b >> fHeaderSize;
      R__b >> fTrailerSize;
      R__b >> fChunkLength;
      delete [] fChunk; 
      fChunk = new ULong64_t[fChunkLength]; 
      R__b.ReadFastArray(fChunk,fChunkLength); 
      R__b.CheckByteCount(R__s, R__c, CDFChunk::IsA());
   } else {
      R__c = R__b.WriteVersion(CDFChunk::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fChunkName.Streamer(R__b);
      R__b << fHeaderSize;
      R__b << fTrailerSize;
      R__b << fChunkLength;
      R__b.WriteFastArray(fChunk,fChunkLength); 
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void CDFChunk::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class CDFChunk.

      TClass *R__cl = ::CDFChunk::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fChunkName", &fChunkName);
      fChunkName.ShowMembers(R__insp, strcat(R__parent,"fChunkName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fHeaderSize", &fHeaderSize);
      R__insp.Inspect(R__cl, R__parent, "fTrailerSize", &fTrailerSize);
      R__insp.Inspect(R__cl, R__parent, "fChunkLength", &fChunkLength);
      R__insp.Inspect(R__cl, R__parent, "*fChunk", &fChunk);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *CDFChunk_IsA(const void *obj) {
      return ((::CDFChunk*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_CDFChunk(void *p) {
      return  p ? new(p) ::CDFChunk : new ::CDFChunk;
   }
   static void *newArray_CDFChunk(Long_t size) {
      return new ::CDFChunk[size];
   }
   // Wrapper around operator delete
   static void delete_CDFChunk(void *p) {
      delete ((::CDFChunk*)p);
   }
   static void deleteArray_CDFChunk(void *p) {
      delete [] ((::CDFChunk*)p);
   }
   static void destruct_CDFChunk(void *p) {
      typedef ::CDFChunk current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CDFChunk

//______________________________________________________________________________
void CDFEventInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class CDFEventInfo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fRunNumber;
      fRunNumberSequenceId.Streamer(R__b);
      R__b >> fEventNumber;
      R__b >> fL1ANumber;
      R__b >> fOrbitNumber;
      R__b >> fBunchNumber;
      R__b >> fCDFRevision;
      R__b.CheckByteCount(R__s, R__c, CDFEventInfo::IsA());
   } else {
      R__c = R__b.WriteVersion(CDFEventInfo::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fRunNumber;
      fRunNumberSequenceId.Streamer(R__b);
      R__b << fEventNumber;
      R__b << fL1ANumber;
      R__b << fOrbitNumber;
      R__b << fBunchNumber;
      R__b << fCDFRevision;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void CDFEventInfo::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class CDFEventInfo.

      TClass *R__cl = ::CDFEventInfo::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__parent, "fRunNumberSequenceId", &fRunNumberSequenceId);
      fRunNumberSequenceId.ShowMembers(R__insp, strcat(R__parent,"fRunNumberSequenceId.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fEventNumber", &fEventNumber);
      R__insp.Inspect(R__cl, R__parent, "fL1ANumber", &fL1ANumber);
      R__insp.Inspect(R__cl, R__parent, "fOrbitNumber", &fOrbitNumber);
      R__insp.Inspect(R__cl, R__parent, "fBunchNumber", &fBunchNumber);
      R__insp.Inspect(R__cl, R__parent, "fCDFRevision", &fCDFRevision);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Return the actual TClass for the object argument
   static TClass *CDFEventInfo_IsA(const void *obj) {
      return ((::CDFEventInfo*)obj)->IsA();
   }
   // Wrappers around operator new
   static void *new_CDFEventInfo(void *p) {
      return  p ? new(p) ::CDFEventInfo : new ::CDFEventInfo;
   }
   static void *newArray_CDFEventInfo(Long_t size) {
      return new ::CDFEventInfo[size];
   }
   // Wrapper around operator delete
   static void delete_CDFEventInfo(void *p) {
      delete ((::CDFEventInfo*)p);
   }
   static void deleteArray_CDFEventInfo(void *p) {
      delete [] ((::CDFEventInfo*)p);
   }
   static void destruct_CDFEventInfo(void *p) {
      typedef ::CDFEventInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CDFEventInfo

/********************************************************
* CDFChunk_dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableCDFChunk_dict();

extern "C" void G__set_cpp_environmentCDFChunk_dict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("CDFChunk.h");
  G__add_compiledheader("CDFEventInfo.h");
  G__cpp_reset_tagtableCDFChunk_dict();
}
class G__CDFChunk_dictdOcc_tag {};

void* operator new(size_t size,G__CDFChunk_dictdOcc_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__CDFChunk_dictdOcc_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_CDFChunk_dictdOcc() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevCDFChunk_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* CDFChunk */
static int G__CDFChunk_dict_175_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   CDFChunk *p=NULL;
   if(G__getaryconstruct()) p=new CDFChunk[G__getaryconstruct()];
   else                    p=new CDFChunk;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,77,(long)((CDFChunk*)(G__getstructoffset()))->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const CDFChunk*)(G__getstructoffset()))->getDataLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const CDFChunk*)(G__getstructoffset()))->getSourceId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)CDFChunk::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)CDFChunk::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)CDFChunk::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      CDFChunk::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const CDFChunk*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((CDFChunk*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((CDFChunk*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((CDFChunk*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)CDFChunk::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)CDFChunk::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)CDFChunk::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_175_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)CDFChunk::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CDFChunk_dict_175_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   CDFChunk *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new CDFChunk(*(CDFChunk*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CDFChunk G__TCDFChunk;
static int G__CDFChunk_dict_175_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (CDFChunk *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (CDFChunk *)((G__getstructoffset())+sizeof(CDFChunk)*i);
   else  delete (CDFChunk *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CDFChunk_dict_175_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   CDFChunk *dest = (CDFChunk*)(G__getstructoffset());
   *dest = (*(CDFChunk*)libp->para[0].ref);
   const CDFChunk& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CDFEventInfo */
static int G__CDFChunk_dict_176_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   CDFEventInfo *p=NULL;
   if(G__getaryconstruct()) p=new CDFEventInfo[G__getaryconstruct()];
   else                    p=new CDFEventInfo;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const CDFEventInfo*)(G__getstructoffset()))->getRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)((const CDFEventInfo*)(G__getstructoffset()))->getRunNumberSequenceId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letULonglong(result7,109,(G__uint64)((const CDFEventInfo*)(G__getstructoffset()))->getEventNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const CDFEventInfo*)(G__getstructoffset()))->getL1ANumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letULonglong(result7,109,(G__uint64)((const CDFEventInfo*)(G__getstructoffset()))->getOrbitNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const CDFEventInfo*)(G__getstructoffset()))->getBunchNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const CDFEventInfo*)(G__getstructoffset()))->getCDFRevisionEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)CDFEventInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)CDFEventInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)CDFEventInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      CDFEventInfo::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,85,(long)((const CDFEventInfo*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((CDFEventInfo*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((CDFEventInfo*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((CDFEventInfo*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)CDFEventInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)CDFEventInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   G__letint(result7,67,(long)CDFEventInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CDFChunk_dict_176_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)CDFEventInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CDFChunk_dict_176_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   CDFEventInfo *p;
   void *xtmp = (void*)G__int(libp->para[0]);
   p=new CDFEventInfo(*(CDFEventInfo*)xtmp);
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CDFEventInfo G__TCDFEventInfo;
static int G__CDFChunk_dict_176_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (CDFEventInfo *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (CDFEventInfo *)((G__getstructoffset())+sizeof(CDFEventInfo)*i);
   else  delete (CDFEventInfo *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CDFChunk_dict_176_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   CDFEventInfo *dest = (CDFEventInfo*)(G__getstructoffset());
   *dest = (*(CDFEventInfo*)libp->para[0].ref);
   const CDFEventInfo& obj = *dest;
   result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* CDFChunk */

/* CDFEventInfo */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCDFChunk_dict {
 public:
  G__Sizep2memfuncCDFChunk_dict() {p=&G__Sizep2memfuncCDFChunk_dict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCDFChunk_dict::*p)();
};

size_t G__get_sizep2memfuncCDFChunk_dict()
{
  G__Sizep2memfuncCDFChunk_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCDFChunk_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk))) {
     CDFChunk *G__Lderived;
     G__Lderived=(CDFChunk*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk),G__get_linked_tagnum(&G__CDFChunk_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo))) {
     CDFEventInfo *G__Lderived;
     G__Lderived=(CDFEventInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo),G__get_linked_tagnum(&G__CDFChunk_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCDFChunk_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("ULong64_t",109,-1,0,
-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__CDFChunk_dictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name: v4-04-02f $:$Id: TROOT.h,v 1.42.4.1 2005/06/03 14:59:00 rdm Exp $",0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CDFChunk_dictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CDFChunk_dictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name: v4-04-02f $:$Id: TROOT.h,v 1.42.4.1 2005/06/03 14:59:00 rdm Exp $",0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CDFChunk_dictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CDFChunk_dictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,"// @(#)root/base:$Name: v4-04-02f $:$Id: TROOT.h,v 1.42.4.1 2005/06/03 14:59:00 rdm Exp $",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* CDFChunk */
static void G__setup_memvarCDFChunk(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk));
   { CDFChunk *p; p=(CDFChunk*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__CDFChunk_dictLN_TString),-1,-1,4,"fChunkName=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHeaderSize=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrailerSize=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fChunkLength=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,77,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fChunk=",0,"[fChunkLength]");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CDFEventInfo */
static void G__setup_memvarCDFEventInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo));
   { CDFEventInfo *p; p=(CDFEventInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunNumber=",0,"Run number");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__CDFChunk_dictLN_TString),-1,-1,4,"fRunNumberSequenceId=",0,"whose run number is this?");
   G__memvar_setup((void*)NULL,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fEventNumber=",0,"Event number");
   G__memvar_setup((void*)NULL,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fL1ANumber=",0,"L1A number");
   G__memvar_setup((void*)NULL,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fOrbitNumber=",0,"Orbit number");
   G__memvar_setup((void*)NULL,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fBunchNumber=",0,"Bunch number");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCDFRevision=",0,"file revision");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCDFChunk_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncCDFChunk(void) {
   /* CDFChunk */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk));
   G__memfunc_setup("CDFChunk",710,G__CDFChunk_dict_175_1_0,105,G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getData",698,G__CDFChunk_dict_175_2_0,77,-1,G__defined_typename("ULong64_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getDataLength",1308,G__CDFChunk_dict_175_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getSourceId",1118,G__CDFChunk_dict_175_4_0,105,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__CDFChunk_dict_175_5_0,85,G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&CDFChunk::Class),0);
   G__memfunc_setup("Class_Name",982,G__CDFChunk_dict_175_6_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&CDFChunk::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__CDFChunk_dict_175_7_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&CDFChunk::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__CDFChunk_dict_175_8_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&CDFChunk::Dictionary),0);
   G__memfunc_setup("IsA",253,G__CDFChunk_dict_175_9_0,85,G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__CDFChunk_dict_175_0_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__CDFChunk_dict_175_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CDFChunk_dict_175_2_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__CDFChunk_dict_175_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&CDFChunk::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__CDFChunk_dict_175_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&CDFChunk::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__CDFChunk_dict_175_5_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&CDFChunk::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__CDFChunk_dict_175_6_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&CDFChunk::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("CDFChunk",710,G__CDFChunk_dict_175_7_1,(int)('i'),G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk),-1,0,1,1,1,0,"u 'CDFChunk' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~CDFChunk",836,G__CDFChunk_dict_175_8_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__CDFChunk_dict_175_9_1,(int)('u'),G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk),-1,1,1,1,1,0,"u 'CDFChunk' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCDFEventInfo(void) {
   /* CDFEventInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo));
   G__memfunc_setup("CDFEventInfo",1115,G__CDFChunk_dict_176_1_0,105,G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getRunNumber",1246,G__CDFChunk_dict_176_2_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getRunNumberSequenceId",2244,G__CDFChunk_dict_176_3_0,67,-1,-1,0,0,1,1,9,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getEventNumber",1451,G__CDFChunk_dict_176_4_0,109,-1,G__defined_typename("ULong64_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getL1ANumber",1127,G__CDFChunk_dict_176_5_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getOrbitNumber",1449,G__CDFChunk_dict_176_6_0,109,-1,G__defined_typename("ULong64_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getBunchNumber",1433,G__CDFChunk_dict_176_7_0,104,-1,G__defined_typename("UInt_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("getCDFRevisionEvent",1886,G__CDFChunk_dict_176_8_0,102,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__CDFChunk_dict_176_9_0,85,G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)(TClass* (*)())(&CDFEventInfo::Class),0);
   G__memfunc_setup("Class_Name",982,G__CDFChunk_dict_176_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&CDFEventInfo::Class_Name),0);
   G__memfunc_setup("Class_Version",1339,G__CDFChunk_dict_176_1_1,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)(Version_t (*)())(&CDFEventInfo::Class_Version),0);
   G__memfunc_setup("Dictionary",1046,G__CDFChunk_dict_176_2_1,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(void (*)())(&CDFEventInfo::Dictionary),0);
   G__memfunc_setup("IsA",253,G__CDFChunk_dict_176_3_1,85,G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__CDFChunk_dict_176_4_1,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__CDFChunk_dict_176_5_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CDFChunk_dict_176_6_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__CDFChunk_dict_176_7_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&CDFEventInfo::DeclFileName),0);
   G__memfunc_setup("ImplFileLine",1178,G__CDFChunk_dict_176_8_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&CDFEventInfo::ImplFileLine),0);
   G__memfunc_setup("ImplFileName",1171,G__CDFChunk_dict_176_9_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)(const char* (*)())(&CDFEventInfo::ImplFileName),0);
   G__memfunc_setup("DeclFileLine",1152,G__CDFChunk_dict_176_0_2,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)(int (*)())(&CDFEventInfo::DeclFileLine),0);
   // automatic copy constructor
   G__memfunc_setup("CDFEventInfo",1115,G__CDFChunk_dict_176_1_2,(int)('i'),G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo),-1,0,1,1,1,0,"u 'CDFEventInfo' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~CDFEventInfo",1241,G__CDFChunk_dict_176_2_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic assignment operator
   G__memfunc_setup("operator=",937,G__CDFChunk_dict_176_3_2,(int)('u'),G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo),-1,1,1,1,1,0,"u 'CDFEventInfo' - 11 - -",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCDFChunk_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCDFChunk_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCDFChunk_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CDFChunk_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_CDFChunk = { "CDFChunk" , 99 , -1 };
G__linked_taginfo G__CDFChunk_dictLN_CDFEventInfo = { "CDFEventInfo" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCDFChunk_dict() {
  G__CDFChunk_dictLN_TClass.tagnum = -1 ;
  G__CDFChunk_dictLN_TBuffer.tagnum = -1 ;
  G__CDFChunk_dictLN_TMemberInspector.tagnum = -1 ;
  G__CDFChunk_dictLN_TObject.tagnum = -1 ;
  G__CDFChunk_dictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__CDFChunk_dictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CDFChunk_dictLN_TString.tagnum = -1 ;
  G__CDFChunk_dictLN_CDFChunk.tagnum = -1 ;
  G__CDFChunk_dictLN_CDFEventInfo.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCDFChunk_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum(&G__CDFChunk_dictLN_TClass);
   G__get_linked_tagnum(&G__CDFChunk_dictLN_TBuffer);
   G__get_linked_tagnum(&G__CDFChunk_dictLN_TMemberInspector);
   G__get_linked_tagnum(&G__CDFChunk_dictLN_TObject);
   G__get_linked_tagnum(&G__CDFChunk_dictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum(&G__CDFChunk_dictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum(&G__CDFChunk_dictLN_TString);
   G__tagtable_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFChunk),sizeof(CDFChunk),-1,28928,(char*)NULL,G__setup_memvarCDFChunk,G__setup_memfuncCDFChunk);
   G__tagtable_setup(G__get_linked_tagnum(&G__CDFChunk_dictLN_CDFEventInfo),sizeof(CDFEventInfo),-1,28928,(char*)NULL,G__setup_memvarCDFEventInfo,G__setup_memfuncCDFEventInfo);
}
extern "C" void G__cpp_setupCDFChunk_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCDFChunk_dict()");
  G__set_cpp_environmentCDFChunk_dict();
  G__cpp_setup_tagtableCDFChunk_dict();

  G__cpp_setup_inheritanceCDFChunk_dict();

  G__cpp_setup_typetableCDFChunk_dict();

  G__cpp_setup_memvarCDFChunk_dict();

  G__cpp_setup_memfuncCDFChunk_dict();
  G__cpp_setup_globalCDFChunk_dict();
  G__cpp_setup_funcCDFChunk_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCDFChunk_dict();
  return;
}
class G__cpp_setup_initCDFChunk_dict {
  public:
    G__cpp_setup_initCDFChunk_dict() { G__add_setup_func("CDFChunk_dict",(G__incsetup)(&G__cpp_setupCDFChunk_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCDFChunk_dict() { G__remove_setup_func("CDFChunk_dict"); }
};
G__cpp_setup_initCDFChunk_dict G__cpp_setup_initializerCDFChunk_dict;

